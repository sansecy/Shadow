project.afterEvaluate {
    android.applicationVariants.all { appVariant ->
        generateTasks(appVariant, variantData.componentIdentity.buildType, appVariant.applicationId)
    }
//com.android.build.api.variant.ApplicationAndroidComponentsExtension
//    com.android.build.gradle.internal.dsl.BaseAppModuleExtension android
//    android.applicationVariants.all { com.android.build.gradle.api.ApplicationVariant appVariant ->
//    }
//    def android = rootProject.project("app").extensions.android
//    println "android = " + android.class
////    def applicationId = android.defaultConfig.applicationId
//    android.applicationVariants.all { appVariant ->
//        project.tasks.create("push${appVariant.name.capitalize()}Start", {
//            group = 'install'
//        }).doFirst {
//            execCommand("adb shell am force-stop ${   appVariant.applicationId}")
//            execCommand("adb shell monkey -p ${   appVariant.applicationId} -c android.intent.category.LAUNCHER 1")
//        }
//    }
//    android.onVariants(android.selector().all(), { appVariant ->
////        def applicationId = appVariant.variantDslInfo.applicationId.get()
//    })

}

//androidComponents {
//    beforeVariants(selector().all(), { variantBuilder ->
//        variantBuilder.enableUnitTest = false
//    })
//    onVariants(selector(), { appVariant ->
//        println "appVariant = " + appVariant
////        if (true) {
////            return false
////        }
//        def buildTypeName
//        buildTypeName = appVariant.componentIdentity.buildType
//
//        def applicationId
//        applicationId = variant.applicationId.get()
////        applicationId = appVariant.variantDslInfo.applicationId.get()
//
//
//        def (String fileName, Object deviceSDKVersion, String toName, String com) = generateTasks(appVariant, buildTypeName, applicationId)
////        def dependOnTask = "package${buildTypeName.capitalize()}Plugin"
////        def pushPackageTask = "push${dependOnTask.capitalize()}"
////        if (project.tasks.findByName(pushPackageTask) == null) {
////            project.task(pushPackageTask)
////                    .dependsOn(":${project.name}:${dependOnTask}")
////                    .group = 'push'
////        }
//    })
//}

private void generateTasks(appVariant, buildTypeName, applicationId) {
//        println "appVariant.name ${appVariant.name} applicationId:" + applicationId
    def pushStartTaskName = "push${appVariant.name.capitalize()}Start"
    def pushStartTask = project.task(pushStartTaskName, {
        group = "push"
    })
    pushStartTask.doFirst {
        execCommand("adb shell am force-stop ${applicationId}")
        execCommand("adb shell monkey -p ${applicationId} -c android.intent.category.LAUNCHER 1")
//        execCommand("adb shell am start ${applicationId}/cn.emagsoftware.gamehall.ui.activity.splash.SplashActivity")
    }
//        if (variant.unitTest != null) {
//            throw new RuntimeException("UnitTest is active while it was deactivated")
//        }
//        if (variant.androidTest == null) {
//            throw new RuntimeException("AndroidTest is not active, it should be")
//        }

    def pushTaskName = "push${appVariant.name.capitalize()}Apk"
    def pushTask = project.tasks.findByName(pushTaskName)
    if (pushTask == null) {
        pushTask = project.task(pushTaskName)
    }

    pushTask.group = 'push'
    pushTask.doLast {
//             applicationId = "cn.emagsoftware.gamehall"
        String fileName = "${project.name}-${appVariant.name.replace("plugin","").uncapitalize()}.zip"
        def fromFile = new File(project.buildDir, "${fileName}")
        String toName = "${project.name}.zip"
        def deviceSDKVersion = execCommand("adb shell getprop ro.build.version.sdk")
        if (deviceSDKVersion != null && Integer.valueOf(deviceSDKVersion) > 19) {
            execCommand("adb shell run-as ${applicationId} mkdir -p /data/data/${applicationId}/files/shadow_plugin")
            execCommand("adb push ${fromFile.path} /data/local/tmp/${fileName}")
            execCommand("adb shell run-as ${applicationId} cp /data/local/tmp/${fileName} /data/data/${applicationId}/files/shadow_plugin/${toName}")
            execCommand("adb shell rm /data/local/tmp/${fileName}")
        } else {
            String com = "adb push ${fromFile.getAbsolutePath()} /data/data/cn.emagsoftware.gamehall/files/appplugin/${toName}"
            execCommand(com)
        }


    }
}
//
//androidComponents {

//    onVariants(selector().withName("debug"), { variant ->
//        if (variant.unitTest != null) {
//            throw new RuntimeException("UnitTest is active while it was deactivated")
//        }
//        if (variant.androidTest == null) {
//            throw new RuntimeException("AndroidTest is not active, it should be")
//        }
//    })
//    onVariants({ appVariant ->
//}

static def findLastApk(def dir) {
    def files = new File(dir).listFiles()
    def newestApk = null
    def newestTime
    files.each {
        if (it.name.endsWith(".apk")) {

            if (it.lastModified() > newestTime) {
                newestTime = it.lastModified()
                newestApk = it
            }
        }
    }
    return newestApk
}

String execCommand(command) {
    println "execCommand = [$command]"
    Runtime runtime = Runtime.getRuntime()
    Process p = runtime.exec(command)
    InputStream fis = p.getInputStream()
    InputStreamReader isr = new InputStreamReader(fis)
    BufferedReader br = new BufferedReader(isr)
    String line = null
    StringBuilder sb = new StringBuilder()
    while ((line = br.readLine()) != null) {
        sb.append(line)
    }
    br.close()
    isr.close()
    fis.close()
    def result = sb.toString()
    println "result = [$result]"
    return result
}