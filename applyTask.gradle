//task pushStart {
//    doLast {
//        execCommand("adb shell am force-stop ${rootProject.project("app").android.defaultConfig.applicationId}")
//        execCommand("adb shell monkey -p ${rootProject.project("app").android.defaultConfig.applicationId} -c android.intent.category.LAUNCHER 1")
//    }
//    group = 'install'
//}


//androidComponents {
//    onVariants { variant ->
//        println variant
//    }
//}
androidComponents {
    beforeVariants(selector().withName("debug"), { variantBuilder ->
        variantBuilder.enableAndroidTest = false
    })
    onVariants(selector().withName("debug"), { variant ->
        if (variant.unitTest == null) {
            throw new RuntimeException("Unit test is not active, it should be")
        }
        if (variant.androidTest != null) {
            throw new RuntimeException("AndroidTest is active while it was deactivated")
        }
        println variant
        println "applicationId = ${variant.applicationId.get()}"

//        def variantName = variant.name.capitalize()
//        def taskName = "push${variantName}Package"
//
//        def newTask = project.tasks.create(taskName, {
//            group = "push"
//        })
//        def managerAssemble = project(":sample-manager").tasks.findByName(":assemble${variantName}")
////        def hostAssemble = project.task(":sample-host:assemble${variantName}")
//        def appPackage = project(":sample-app").tasks.findByName(":package${variantName}Plugin")
////        hostAssemble.dependsOn(managerAssemble)
//        appPackage.dependsOn(newTask)
//        newTask.dependsOn(managerAssemble)
//        appPackage.dependsOn(newTask)
    })
}
//android.applicationVariants.all { appVariant ->
//    def versionCode = rootProject.project("sample-host").android.defaultConfig.versionName
//    def pushTask = "push${appVariant.name.capitalize()}"
//    def task = project.task(pushTask)
//
//    def libName
//    if (project.name == "mainpage") {
//        libName = 'libmainpage'
//    }else if (project.name == "cloudgame") {
//        libName = 'libcloudgame'
//    }
//    task.group = 'install'
//    task.doLast {
//        def fromFile = findLastApk(project.buildDir.path + "/outputs/apk/${appVariant.flavorName}/${appVariant.buildType.name}")
//        def deviceSDKVersion = execCommand("adb shell getprop ro.build.version.sdk")
//        String fileName = "${libName}_${versionCode}.apk"
//        if (deviceSDKVersion != null && Integer.valueOf(deviceSDKVersion) > 19) {
////                execCommand("adb push ${fromFile.getAbsolutePath()} /sdcard/${fileName}")
//            execCommand("adb shell run-as com.cmgame.gamehalltv mkdir -p /data/data/com.cmgame.gamehalltv/files/gamehall_plugin")
//            execCommand("adb push ${fromFile.path} /data/local/tmp/${fileName}")
//            execCommand("adb shell run-as com.cmgame.gamehalltv cp /data/local/tmp/${fileName} /data/data/com.cmgame.gamehalltv/files/gamehall_plugin/${fileName}")
//            execCommand("adb shell rm /data/local/tmp/${fileName}")
//        } else {
//            String com = "adb push ${fromFile.getAbsolutePath()} /data/data/com.cmgame.gamehalltv/files/gamehall_plugin/${fileName}"
//            execCommand(com)
//        }
//    }
//
//    project.task("pushAssmeble${appVariant.name.capitalize()}Plugin")
//            .dependsOn(":${project.name}:assemble${appVariant.name.capitalize()}Plugin")
//            .group = 'install'
//
//}

static def findLastApk(def dir) {
    def files = new File(dir).listFiles()
    def newestApk = null
    def newestTime
    files.each {
        if (it.name.endsWith(".apk")) {

            if (it.lastModified() > newestTime) {
                newestTime = it.lastModified()
                newestApk = it
            }
        }
    }
    return newestApk
}

String execCommand(command) {
    println "execCommand = [$command]"
    Runtime runtime = Runtime.getRuntime()
    Process p = runtime.exec(command)
    InputStream fis = p.getInputStream()
    InputStreamReader isr = new InputStreamReader(fis)
    BufferedReader br = new BufferedReader(isr)
    String line = null
    StringBuilder sb = new StringBuilder()
    while ((line = br.readLine()) != null) {
        sb.append(line)
    }
    br.close()
    isr.close()
    fis.close()
    def result = sb.toString()
    println "result = [$result]"
    return result
}