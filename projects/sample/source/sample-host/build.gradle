apply plugin: 'com.android.application'
//apply plugin: 'com.tencent.shadow.gradle-method-time-statistics'
apply from: "${project.rootProject.rootDir.path}/applyTask.gradle"
buildscript {
    repositories {
        if (!System.getenv().containsKey("DISABLE_TENCENT_MAVEN_MIRROR")) {
            maven { url 'https://mirrors.tencent.com/nexus/repository/maven-public/' }
        } else {
            google()
            mavenCentral()
        }
    }

    dependencies {
        classpath 'com.tencent.shadow.core:runtime'
        classpath 'com.tencent.shadow.core:activity-container'
        classpath 'com.tencent.shadow.core:gradle-method-time-statistics'
        classpath "org.javassist:javassist:$javassist_version"
    }
}

android {
    compileSdkVersion project.COMPILE_SDK_VERSION
    defaultConfig {
        applicationId project.SAMPLE_HOST_APP_APPLICATION_ID
        minSdkVersion project.MIN_SDK_VERSION
        targetSdkVersion project.TARGET_SDK_VERSION
        versionCode project.VERSION_CODE
        versionName project.VERSION_NAME
        testInstrumentationRunner "com.tencent.shadow.test.CustomAndroidJUnitRunner"
    }
    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            signingConfig signingConfigs.create("release")
            signingConfig.initWith(buildTypes.debug.signingConfig)
        }
    }

    sourceSets {
        debug {
            assets.srcDir('build/generated/assets/debug/')
        }
        release {
            assets.srcDir('build/generated/assets/release/')
        }
    }
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.aar'])
    implementation "commons-io:commons-io:$commons_io_android_version"//sample-host从assets中复制插件用的
    implementation "org.slf4j:slf4j-api:$slf4j_version"

    implementation 'com.tencent.shadow.core:common'
    implementation 'com.tencent.shadow.dynamic:dynamic-host'
    implementation project(':sample-constant')
    implementation project(':sample-host-lib')
    implementation project(':tools')
    implementation project(':AndroidLib')
    implementation "androidx.core:core:1.5.0"
    implementation "androidx.appcompat:appcompat:1.2.0"
    implementation "androidx.constraintlayout:constraintlayout:2.1.1"
    api "com.android.support:recyclerview-v7:$android_support_version"
    implementation 'org.jetbrains:annotations:15.0'
//    api "com.sansecy.tools:monitor"
//    api "com.sansecy.tools:see"
}

def createCopyTask(projectName, buildType, name, apkName, inputFile, taskName) {
    def outputFile = file("${getBuildDir()}/generated/assets/${buildType}/${apkName}")
    outputFile.getParentFile().mkdirs()
    return tasks.create("copy${buildType.capitalize()}${name.capitalize()}Task", Copy) {
        group = 'build'
        description = "复制${name}到assets中."
        from(inputFile.getParent()) {
            include(inputFile.name)
            rename { outputFile.name }
        }
        into(outputFile.getParent())

    }.dependsOn("${projectName}:${taskName}")
}

def generateAssets(generateAssetsTask, buildType) {

    def moduleName = 'sample-manager'
    def pluginManagerApkFile = file(
            "${project(":sample-manager").getBuildDir()}" +
                    "/outputs/apk/${buildType}/" +
                    "${moduleName}-${buildType}.apk"
    )
    generateAssetsTask.dependsOn createCopyTask(
            ':sample-manager',
            buildType,
            moduleName,
            'pluginmanager.apk',
            pluginManagerApkFile,
            "assemble${buildType.capitalize()}"
    )


    generateAssetsTask.dependsOn createCopyTask(
            ':launcher',
            buildType,
            "launcher",
            'plugin-launcher.zip',
            file("${project(":launcher").buildDir}/launcher-${buildType}.zip"),
            "package${buildType.capitalize()}Plugin"
    )

//    def pluginZip = file("${getRootProject().getBuildDir()}/plugin-${buildType}.zip")
//    generateAssetsTask.dependsOn createCopyTask(
//            ':sample-app',
//            buildType,
//            'plugin-zip',
//            "plugin-${buildType}.zip",
//            pluginZip,
//            "package${buildType.capitalize()}Plugin"
//    )
//
//    def pluginZip2 = file("${getRootProject().getBuildDir()}/plugin-${buildType}.zip")
//    generateAssetsTask.dependsOn createCopyTask(
//            ':sample-app2',
//            buildType,
//            'plugin-zip2',
//            "plugin2-${buildType}.zip",
//            pluginZip2,
//            "package${buildType.capitalize()}Plugin"
//    )


}

tasks.whenTaskAdded { task ->
    if (task.name == "generateDebugAssets") {
        generateAssets(task, 'debug')
    }
    if (task.name == "generateReleaseAssets") {
        generateAssets(task, 'release')
    }
}