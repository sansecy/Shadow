buildscript {
    repositories {
        if (!System.getenv().containsKey("DISABLE_TENCENT_MAVEN_MIRROR")) {
            maven { url 'https://mirrors.tencent.com/nexus/repository/maven-public/' }
        } else {
            google()
            mavenCentral()
        }
    }

    dependencies {
        classpath 'com.tencent.shadow.core:runtime'
        classpath 'com.tencent.shadow.core:activity-container'
        classpath 'com.tencent.shadow.core:gradle-plugin'
        classpath "org.javassist:javassist:$javassist_version"
    }
}

apply plugin: 'com.android.application'
apply plugin: 'com.tencent.shadow.plugin'
apply from: "${project.rootProject.rootDir.path}/applyTask.gradle"

android {
    compileSdkVersion project.COMPILE_SDK_VERSION

    defaultConfig {
        applicationId project.SAMPLE_HOST_APP_APPLICATION_ID
        minSdkVersion project.MIN_SDK_VERSION
        targetSdkVersion project.TARGET_SDK_VERSION
        versionCode project.VERSION_CODE
        versionName project.VERSION_NAME
    }

    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
            shrinkResources false
        }
        release {
            debuggable true
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            signingConfig signingConfigs.create("release")
            signingConfig.initWith(buildTypes.debug.signingConfig)
        }
    }

    // 将插件applicationId设置为和宿主相同
//    productFlavors {
//        plugin {
//            applicationId project.SAMPLE_HOST_APP_APPLICATION_ID
//        }
//    }

    lintOptions {
        abortOnError false
    }

    // 将插件的资源ID分区改为和宿主0x7F不同的值
    aaptOptions {
        noCompress "dat"
        additionalParameters "--package-id", "0x7A", "--allow-reserved-package-id"
    }
}

dependencies {
// https://mvnrepository.com/artifact/com.android.support.constraint/constraint-layout
    implementation 'com.android.support.constraint:constraint-layout:2.0.4'
// https://mvnrepository.com/artifact/com.bytedance.boost_multidex/boost_multidex
    implementation 'com.bytedance.boost_multidex:boost_multidex:1.0.1'


    //注意sample-host-lib要用compileOnly编译而不打包在插件中。在packagePlugin任务中配置hostWhiteList允许插件访问宿主的类。
    compileOnly project(":sample-host-lib")
    implementation project(":sample-base-lib")
    //Shadow Transform后业务代码会有一部分实际引用runtime中的类
    //如果不以compileOnly方式依赖，会导致其他Transform或者Proguard找不到这些类
    compileOnly 'com.tencent.shadow.core:runtime'
    implementation "com.android.support:support-v4:$android_support_version"
    implementation "com.android.support:appcompat-v7:$android_support_version"
}

preBuild.dependsOn(":sample-host-lib:jarDebugPackage")


def createDuplicateApkTask(buildType) {
    def apkDir = file("${getBuildDir()}/outputs/apk/plugin/$buildType")

    return tasks.create("duplicatePlugin${buildType.capitalize()}ApkTask", Copy) {
        group = 'build'
        description = "复制一个sample-app2-plugin-${buildType}.apk用于测试目的"
        from(apkDir) {
            include("sample-app2-plugin-${buildType}.apk")
            rename { "sample-app2-plugin-${buildType}2.apk" }
        }
        into(apkDir)

    }.dependsOn(":sample-app2:assemblePlugin${buildType.capitalize()}")
}

//tasks.whenTaskAdded { task ->
//    if (task.name == "assemblePluginDebug") {
//        def createTask = createDuplicateApkTask('debug')
//        task.finalizedBy(createTask)
//    }
//    if (task.name == "assemblePluginRelease") {
//        def createTask = createDuplicateApkTask('release')
//        task.finalizedBy(createTask)
//    }
//}


shadow {
    transform {
//        useHostContext = ['com.tencent.shadow.sample.plugin.app.lib.gallery.AppUtils.setWindow(android.app.Activity)$1']
    }

    packagePlugin {
        pluginTypes {
            debug {
                def buildTypeName = 'debug'
                def variantName = 'plugin'
                pluginApks {
                    pluginApk1 {
//businessName相同的插件，context获取的Dir是相同的。businessName留空，表示和宿主相同业务，直接使用宿主的Dir。
//                        partKey = project.name
                        businessName = ''
                        partKey = 'sample-plugin-app2'
                        buildTask = "assemble${variantName.capitalize()}${buildTypeName.capitalize()}".toString()
                        name = "${project.name}-${variantName}-${buildTypeName.uncapitalize()}.apk".toString()
//                        apkPath = "projects/sample/source/sample-plugin/sample-app2/build/outputs/apk/plugin/${buildTypeName.uncapitalize()}/${project.name}--${variantName}-${buildTypeName.uncapitalize()}.apk".toString()
                        apkPath = "projects/sample/source/sample-plugin/sample-app2/build/outputs/apk/plugin/${buildTypeName.uncapitalize()}/${project.name}-${variantName}-${buildTypeName.uncapitalize()}.apk".toString()
//                        buildTask = ':sample-app2:assembleDebug'
//                        apkPath = 'projects/sample/source/sample-plugin/sample-app2/build/outputs/apk/plugin/debug/sample-app2-plugin-debug.apk'
                        hostWhiteList = [
                                "com.tencent.shadow.sample.host.lib",
                                "com.tencent.shadow.sample.host.lib.**",
                                "com.tencent.shadow.sample.plugin",
                                "com.tencent.shadow.sample.plugin.**",
                        ]
//                        dependsOn = ['sample-base']
                    }
//                    pluginApk2 {
//                        businessName = 'sample-plugin-app2'
//                        partKey = 'sample-plugin-app2'
//                        buildTask = ':sample-app2:assemblePluginDebug'
//                        apkPath = 'projects/sample/source/sample-plugin/sample-app2/build/outputs/apk/plugin/debug/sample-app2-plugin-debug2.apk'
//                        hostWhiteList = ["com.tencent.shadow.sample.host.lib"]
////                        dependsOn = ['sample-base']
//                    }
                }
            }

            release {
                loaderApkConfig = new Tuple2('sample-loader-release.apk', ':sample-loader:assembleRelease')
                runtimeApkConfig = new Tuple2('sample-runtime-release.apk', ':sample-runtime:assembleRelease')
                pluginApks {
                    pluginApk1 {
                        businessName = ''
                        partKey = 'sample-plugin-app2'
                        buildTask = ':sample-app2:assemblePluginRelease'
                        apkPath = 'projects/sample/source/sample-plugin/sample-app2/build/outputs/apk/plugin/release/sample-app2-plugin-release.apk'
                        hostWhiteList = ["com.tencent.shadow.sample.host.lib"]
//                        dependsOn = ['sample-base']
                    }
//                    pluginApk2 {
//                        businessName = 'sample-plugin-app2'
//                        partKey = 'sample-plugin-app2'
//                        buildTask = ':sample-app2:assemblePluginRelease'
//                        apkPath = 'projects/sample/source/sample-plugin/sample-app2/build/outputs/apk/plugin/release/sample-app2-plugin-release2.apk'
//                        hostWhiteList = ["com.tencent.shadow.sample.host.lib"]
////                        dependsOn = ['sample-base']
//                    }
//                    sampleBase {
//                        businessName = 'sample-plugin-app'
//                        partKey = 'sample-base'
//                        buildTask = ':sample-base:assemblePluginRelease'
//                        apkPath = 'projects/sample/source/sample-plugin/sample-base/build/outputs/apk/plugin/release/sample-base-plugin-release.apk'
//                        hostWhiteList = ["com.tencent.shadow.sample.host.lib"]
//                    }
                }
            }
        }

        archiveSuffix = System.getenv("PluginSuffix") ?: ""
        archivePrefix = 'plugin'
        destinationDir = "${getRootProject().getBuildDir()}"

        version = 4
        compactVersion = [1, 2, 3]
        uuidNickName = "1.1.5"
    }
}

//project.afterEvaluate {
//    android.applicationVariants.all { def appVariant ->
//        println "appVariant.name = " + appVariant.name
//        println "appVariant.buildType.name = " + appVariant.buildType.name
//        println "appVariant.flavorName = " + appVariant.flavorName
//
//
//        def taskName = "package${appVariant.buildType.name.capitalize()}Plugin"
//        println "taskName = " + taskName
//        project.tasks.findByName(taskName).doLast {
//            moveTask(appVariant, "", "plugin-debug.zip")
//        }
//    }
//}

def moveTask(appVariant, fromProjectName, moveTargetName) {
    project.copy {
        def file = findLastApk("${rootProject.buildDir.path}")
        from file
        into "${project(":sample-host").buildDir.path}/generated/assets/plugin-zip/${appVariant.buildType.name}"
        rename { "${moveTargetName}" }
    }
}

static def findLastApk(def dir) {
    def files = new File(dir).listFiles()
    def newestApk = null
    def newestTime
    files.each {
        if (it.name.endsWith(".zip")) {
            if (it.lastModified() > newestTime) {
                newestTime = it.lastModified()
                newestApk = it
            }
        }
    }
    return newestApk
}