apply plugin: 'com.android.application'
apply from: "${project.rootProject.rootDir.path}/common_tool.gradle"

android {
    compileSdkVersion project.COMPILE_SDK_VERSION
    defaultConfig {
        applicationId project.SAMPLE_HOST_APP_APPLICATION_ID
        minSdkVersion project.MIN_SDK_VERSION
        targetSdkVersion project.TARGET_SDK_VERSION
        versionCode project.VERSION_CODE
        versionName project.VERSION_NAME
    }
    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            signingConfig signingConfigs.create("release")
            signingConfig.initWith(buildTypes.debug.signingConfig)
        }
    }
    lintOptions {
        abortOnError false
    }
    flavorDimensions('type')
    productFlavors {
        miguplay {
            dimension "type"
            applicationId "com.migu.miguplay"
        }
        gamehall{
            dimension "type"
            applicationId "cn.emagsoftware.gamehall"
        }
    }
}

dependencies {
    implementation 'com.tencent.shadow.dynamic:dynamic-manager'
    implementation 'com.tencent.shadow.core:manager'
    implementation 'com.tencent.shadow.dynamic:dynamic-loader'
    implementation project(':sample-constant')

    compileOnly 'com.tencent.shadow.core:common'
    compileOnly 'com.tencent.shadow.dynamic:dynamic-host'
}

//project.afterEvaluate {
//    android.applicationVariants.all { def appVariant ->
//        println "appVariant.name = " + appVariant.name
//        println "appVariant.buildType.name = " + appVariant.buildType.name
//        println "appVariant.flavorName = " + appVariant.flavorName
//
//
//        def taskName = "assemble${appVariant.name.capitalize()}"
//        println "taskName = " + taskName
//        project.tasks.findByName(taskName).doLast {
//            moveTask(appVariant, "", "pluginmanager.apk")
//        }
//    }
//}
project.afterEvaluate {
    android.applicationVariants.all { appVariant ->
        generateTasks(appVariant, variantData.componentIdentity.buildType, appVariant.applicationId)
    }
}

private void generateTasks(appVariant, buildTypeName, applicationId) {
    def pushStartTaskName = "push${appVariant.name.capitalize()}Start"
    def pushStartTask = project.task(pushStartTaskName, {
        group = "push"
    })
    pushStartTask.doFirst {
        execCommand("adb shell am force-stop ${applicationId}")
        execCommand("adb shell monkey -p ${applicationId} -c android.intent.category.LAUNCHER 1")
//        execCommand("adb shell am start ${applicationId}/cn.emagsoftware.gamehall.ui.activity.splash.SplashActivity")
    }
    def pushAssembleTaskName = "push${appVariant.name.capitalize()}Assemble"
    def pushAssembleTask = project.task(pushAssembleTaskName, {
        group = "push"
    })
    pushAssembleTask.dependsOn("assemble${appVariant.name.capitalize()}")

    def pushTaskName = "push${appVariant.name.capitalize()}Apk"
    def pushTask = project.tasks.findByName(pushTaskName)
    if (pushTask == null) {
        pushTask = project.task(pushTaskName)
    }

    pushTask.group = 'push'
    pushTask.doLast {
        def fromFile = findLastApk(new File(project.buildDir, "outputs/apk/${appVariant.name}").path)
        String toName = "pluginmanager.apk"
        pushFile(applicationId, fromFile, toName)
    }
}
def moveTask(appVariant, fromProjectName, moveTargetName) {
    project.copy {
//        def file = findLastApk("${project.buildDir.path}/outputs/apk/${appVariant.buildType.name}")
        def file = findLastApk("${project.buildDir.path}/outputs/apk/${appVariant.buildType.name}")
//        def file = findLastApk("${project.buildDir.path}/outputs/apk/${appVariant.buildType.name}")
        from file
        into "${project(":sample-host").buildDir.path}/generated/assets/sample-manager/${appVariant.buildType.name}"
        rename { "${moveTargetName}" }
    }
}

static def pushFile(String applicationId, File fromFile, String toFileName) {
    def deviceSDKVersion = execCommand("adb shell getprop ro.build.version.sdk")
    if (deviceSDKVersion != null && Integer.valueOf(deviceSDKVersion) > 19) {
        execCommand("adb shell run-as ${applicationId} mkdir -p /data/data/${applicationId}/files")
        execCommand("adb push ${fromFile.path} /data/local/tmp/${toFileName}")
        execCommand("adb shell run-as ${applicationId} cp /data/local/tmp/${toFileName} /data/data/${applicationId}/files/${toFileName}")
        execCommand("adb shell rm /data/local/tmp/${toFileName}")
    } else {
        String com = "adb push ${fromFile.getAbsolutePath()} /data/data/cn.emagsoftware.gamehall/files/appplugin/${toFileName}"
        execCommand(com)
    }
}

static def findLastApk(def dir) {
    def files = new File(dir).listFiles()
    def newestApk = null
    def newestTime
    files.each {
        if (it.name.endsWith(".apk")) {

            if (it.lastModified() > newestTime) {
                newestTime = it.lastModified()
                newestApk = it
            }
        }
    }
    return newestApk
}

static String execCommand(command) {
    println "execCommand = [$command]"
    Runtime runtime = Runtime.getRuntime()
    Process p = runtime.exec(command)
    InputStream fis = p.getInputStream()
    InputStreamReader isr = new InputStreamReader(fis)
    BufferedReader br = new BufferedReader(isr)
    String line = null
    StringBuilder sb = new StringBuilder()
    while ((line = br.readLine()) != null) {
        sb.append(line)
    }
    br.close()
    isr.close()
    fis.close()
    def result = sb.toString()
    println "result = [$result]"
    return result
}