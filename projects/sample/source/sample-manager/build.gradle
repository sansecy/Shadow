apply plugin: 'com.android.application'

android {
    compileSdkVersion project.COMPILE_SDK_VERSION
    defaultConfig {
        applicationId project.SAMPLE_HOST_APP_APPLICATION_ID
        minSdkVersion project.MIN_SDK_VERSION
        targetSdkVersion project.TARGET_SDK_VERSION
        versionCode project.VERSION_CODE
        versionName project.VERSION_NAME
    }
    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            signingConfig signingConfigs.create("release")
            signingConfig.initWith(buildTypes.debug.signingConfig)
        }
    }
    lintOptions {
        abortOnError false
    }
}

dependencies {
    implementation 'com.tencent.shadow.dynamic:dynamic-manager'
    implementation 'com.tencent.shadow.core:manager'
    implementation 'com.tencent.shadow.dynamic:dynamic-loader'
    implementation project(':sample-constant')

    compileOnly 'com.tencent.shadow.core:common'
    compileOnly 'com.tencent.shadow.dynamic:dynamic-host'
}

project.afterEvaluate {
    android.applicationVariants.all { def appVariant ->
        println "appVariant.name = " + appVariant.name
        println "appVariant.buildType.name = " + appVariant.buildType.name
        println "appVariant.flavorName = " + appVariant.flavorName


        def taskName = "assemble${appVariant.name.capitalize()}"
        println "taskName = " + taskName
        project.tasks.findByName(taskName).doLast {
            moveTask(appVariant, "", "pluginmanager.apk")
        }
    }
}
def moveTask(appVariant, fromProjectName, moveTargetName) {
    project.copy {
//        def file = findLastApk("${project.buildDir.path}/outputs/apk/${appVariant.buildType.name}")
        def file = findLastApk("${project.buildDir.path}/intermediates/apk/${appVariant.buildType.name}")
//        def file = findLastApk("${project.buildDir.path}/outputs/apk/${appVariant.buildType.name}")
        from file
        into "${project(":sample-host").buildDir.path}/generated/assets/sample-manager/${appVariant.buildType.name}"
        rename { "${moveTargetName}" }
    }
}

static def findLastApk(def dir) {
    def files = new File(dir).listFiles()
    def newestApk = null
    def newestTime
    files.each {
        if (it.name.endsWith(".apk")) {
            if (it.lastModified() > newestTime) {
                newestTime = it.lastModified()
                newestApk = it
            }
        }
    }
    return newestApk
}