package com.didi.virtualapk

import com.android.build.gradle.internal.VariantManager
import com.android.build.gradle.internal.api.ApplicationVariantImpl
import com.android.build.gradle.internal.dsl.BaseAppModuleExtension
import com.android.build.gradle.internal.plugins.AppPlugin
import com.android.build.gradle.internal.res.LinkApplicationAndroidResourcesTask
import com.android.build.gradle.internal.scope.VariantScopeImpl
import com.android.build.gradle.internal.tasks.R8Task
import com.android.build.gradle.internal.tasks.factory.TaskFactory
import com.android.build.gradle.internal.tasks.factory.TaskFactoryImpl
import com.android.build.gradle.tasks.MergeSourceSetFolders
import com.android.utils.StringHelper
import com.didi.virtualapk.hooker.MergeAssetsHooker
import com.didi.virtualapk.hooker.PrepareDependenciesHooker
import com.didi.virtualapk.tasks.AssemblePlugin
import com.didi.virtualapk.transform.StripClassAndResTransform
import com.didi.virtualapk.utils.XMLUtils
import org.gradle.api.InvalidUserDataException
import org.gradle.api.Plugin
import org.gradle.api.Project
import org.gradle.api.artifacts.Configuration
import org.gradle.api.artifacts.DependencyResolveDetails
import org.gradle.api.artifacts.ResolutionStrategy
import org.gradle.internal.reflect.Instantiator
import org.gradle.tooling.provider.model.ToolingModelBuilderRegistry

import javax.inject.Inject

/**
 * VirtualAPK gradle plugin for plugin project
 *
 * @author zhengtao
 */

class VAPlugin implements Plugin<Project> {

    protected Project project
    protected Instantiator instantiator
    VariantManager variantManager
    VAExtension virtualApk

    boolean checkVariantFactoryInvoked
    //Files be retained after host apk build
    //private def hostFileNames = ['versions', 'R.txt', 'mapping.txt', 'versions.txt', 'Host_R.txt'] as Set

    /**
     * Stores files generated by the host side and is used when building plugin apk
     */
    private def hostDir
    private boolean checked
    BaseAppModuleExtension android

    TaskFactory taskFactory

    @Inject
    public VAPlugin(Instantiator instantiator, ToolingModelBuilderRegistry registry) {
        this.instantiator = instantiator
    }
    AppPlugin appPlugin


    @Override
    void apply(final Project project) {
        this.project = project
        virtualApk = project.extensions.create('virtualApk', VAExtension)
        hostDir = new File(project.rootProject.buildDir, "host")
        if (!hostDir.exists()) {
            hostDir.mkdirs()
        }
        virtualApk.hostDependenceFile = new File(hostDir, "versions.txt")
        def startParameter = project.gradle.startParameter.taskNames[0]
        if (startParameter != null && startParameter.contains(":")) {
            startParameter = startParameter.split(":").find {
                if (it.startsWith("assemble")) {
                    return it
                }
            }
        }
        println "BasePlugin.apply startParameter = " + startParameter
        android = project.extensions.getByType(BaseAppModuleExtension.class)
        appPlugin = project.plugins.getPlugin(AppPlugin.class)

        boolean isBuildPlugining = false

        if (startParameter != null && startParameter.startsWith("assemble") && startParameter.containsIgnoreCase("plugin")) {
            isBuildPlugining = true
        }

        def nativeLibs = new File(hostDir, "nativeLibs.txt")
        if (nativeLibs.exists()) {
            nativeLibs.eachLine {
                println "VAPlugin.apply packagingOptions.exclude : " + it
                android.packagingOptions.exclude(it)
            }
        }
        android.registerTransform(new StripClassAndResTransform(project, null))
        project.afterEvaluate {
            println "BasePlugin.apply virtualApk.packageId = " + virtualApk.packageId
            taskFactory = new TaskFactoryImpl(project.tasks)
            AppPlugin appPlugin = project.plugins.findPlugin(AppPlugin)
            variantManager = appPlugin.variantManager
            android.defaultConfig.buildConfigField("int", "PACKAGE_ID", "0x" + Integer.toHexString(virtualApk.packageId))
            createTasks(project, taskFactory)
            if (isBuildPlugining) {
                checkConfig()
//                checkPluginDependVersion(true)
            }

            if (!virtualApk.stripResource) {
                return
            }
            registerTaskHookers()

            if (android.dataBinding.enabled) {
                project.dependencies.add('annotationProcessor', project.files(jarPath.absolutePath))
            }

            android.applicationVariants.each { ApplicationVariantImpl applicationVariant ->
//                if (applicationVariant.buildType.minifyEnabled) {
//                    R8Task proguardTask = project.tasks["minify${applicationVariant.name.capitalize()}WithR8"]
////            StringHelper.appendCapitalized("minify", applicationVariant.name.capitalize()) + "WithR8"
////            StringHelper.appendCapitalized("minify", applicationVariant.name.capitalize()) + "WithR8"
//                    def mappingFile = project.file(project.rootProject.buildDir.path + "/host/mapping.txt")
//                    println("mappingFile=" + mappingFile.path)
//                    proguardTask.testedMappingFile.from(mappingFile)
////            ProGuardTransform proguardTransform = proguardTask.transform
//                }

                virtualApk.with {
                    VAExtension.VAContext vaContext = getVaContext()
                    vaContext.packageName = applicationVariant.applicationId
                    vaContext.packagePath = vaContext.packageName.replace('.'.charAt(0), File.separatorChar)
                    vaContext.hostSymbolFile = new File(hostDir, "Host_R.txt")
                }
            }
        }
    }

    private void createTasks(Project project, TaskFactory taskFactory) {
        android.applicationVariants.each { ApplicationVariantImpl variant ->
            def assembleTaskName = StringHelper.appendCapitalized("assemble", variant.name) + "Plugin"
            final def configAction = new AssemblePlugin.ConfigAction(project, variant)
            taskFactory.register(assembleTaskName, AssemblePlugin, configAction)
        }
    }

    /**
     * Check the plugin apk related config infos
     */
    private void checkConfig() {
        if (checked) {
            return
        }
        checked = true

        int packageId = virtualApk.packageId
        if (packageId == 0) {
            def err = new StringBuilder('you should set the packageId in build.gradle,\n ')
            err.append('please declare it in application project build.gradle:\n')
            err.append('    virtualApk {\n')
            err.append('        packageId = 0xXX \n')
            err.append('    }\n')
            err.append('apply for the value of packageId.\n')
            throw new InvalidUserDataException(err.toString())
        }
        if (packageId >= 0x7f || packageId <= 0x01) {
            throw new IllegalArgumentException('the packageId must be in [0x02, 0x7E].')
        }

        String targetHost = virtualApk.targetHost
        if (!targetHost) {
            def err = new StringBuilder('\nyou should specify the targetHost in build.gradle, e.g.: \n')
            err.append('    virtualApk {\n')
            err.append('        //when target Host in local machine, value is host application directory\n')
            err.append('        targetHost = ../xxxProject/app \n')
            err.append('    }\n')
            throw new InvalidUserDataException(err.toString())
        }

        File hostLocalDir = new File(targetHost)
        if (!hostLocalDir.exists()) {
            def err = "The directory of host application doesn't exist! Dir: ${hostLocalDir.path}"
            throw new IllegalStateException(err)
        }

//        File hostR = new File(hostLocalDir, "build/VAHost/Host_R.txt")
//        if (hostR.exists()) {
//            def dst = new File(hostDir, "Host_R.txt")
//            use(FileBinaryCategory) {
//                dst << hostR
//            }
//        } else {
//            def err = new StringBuilder("Can't find ${hostR.path}, please check up your host application\n")
//            err.append("  need apply com.didi.virtualapk.host in build.gradle of host application\n ")
//            throw new InvalidUserDataException(err.toString())
//        }

//        File hostVersions = new File(hostLocalDir, "build/VAHost/versions.txt")
//        if (hostVersions.exists()) {
//            def dst = new File(hostDir, "versions.txt")
//            use(FileBinaryCategory) {
//                dst << hostVersions
//            }
//        } else {
//            def err = new StringBuilder("Can't find ${hostVersions.path}, please check up your host application\n")
//            err.append("  need apply com.didi.virtualapk.host in build.gradle of host application \n")
//            throw new InvalidUserDataException(err.toString())
//        }

//        File hostMapping = new File(hostLocalDir, "build/VAHost/mapping.txt")
//        if (hostMapping.exists()) {
//            def dst = new File(hostDir, "mapping.txt")
//            use(FileBinaryCategory) {
//                dst << hostMapping
//            }
//        }

//        AppPlugin appPlugin = project.plugins.findPlugin(AppPlugin)
//        ProjectOptions projectOptions = Reflect.on(appPlugin).field('projectOptions').get()
//        if (projectOptions.get(BooleanOption.ENABLE_DEX_ARCHIVE)) {
//            throw new InvalidUserDataException("Can't using incremental dexing mode, please add 'android.useDexArchive=false' in gradle.properties of :${project.name}.")
//        }
//        project.ext.set('android.useDexArchive', false)

    }


    void registerTaskHookers() {
        android.applicationVariants.all { ApplicationVariantImpl appVariant ->
            //针对plugin变体增加构建
            boolean usePlugin = appVariant.name.containsIgnoreCase("plugin") ||
                    appVariant.name.containsIgnoreCase("Plugin")
            if (usePlugin) {
                def preBuildTaskName = StringHelper.appendCapitalized("pre", appVariant.name.capitalize() + "Build")
                passByTask(preBuildTaskName, appVariant)
//                def assembleTaskName = StringHelper.appendCapitalized("assemble", appVariant.name)
//                passByTask(assembleTaskName, appVariant)
                println("${appVariant.name}  contain plugin")
                LinkApplicationAndroidResourcesTask processResTask = appVariant.getVariantData().taskContainer.processAndroidResTask.get()
//                def mergeResourcesTask = appVariant.getVariantData().taskContainer.mergeResourcesTask.get()
//                mergeResourcesTask.doLast {
//                    println "removeDuplicateNode"
////                    def from = new File(project.buildDir, "intermediates/merged_manifest/${appVariant.name}/AndroidManifest.xml")
//                    def from = new File(project.buildDir, "intermediates/merged_manifest/${appVariant.name}/AndroidManifest.xml")
//                    def from2 = new File(project.buildDir, "intermediates/merged_manifests/${appVariant.name}/AndroidManifest.xml")
//                    def duplicateManifestPath = new File(project.rootProject.buildDir, "host/AndroidManifest.xml")
//                    XMLUtils.removeDuplicateNode(from.path, duplicateManifestPath.path)
//                    XMLUtils.removeDuplicateNode(from2.path, duplicateManifestPath.path)
//                }
                def processManifestTask = appVariant.getVariantData().taskContainer.processManifestTask.get()
                processManifestTask.doLast {
                    println "removeDuplicateNode"
//                    def from = new File(project.buildDir, "intermediates/merged_manifest/${appVariant.name}/AndroidManifest.xml")
                    def from = new File(project.buildDir, "intermediates/merged_manifest/${appVariant.name}/AndroidManifest.xml")
                    def from2 = new File(project.buildDir, "intermediates/merged_manifests/${appVariant.name}/AndroidManifest.xml")
                    def duplicateManifestPath = new File(project.rootProject.buildDir, "host/AndroidManifest.xml")
                    XMLUtils.removeDuplicateNode(from.path, duplicateManifestPath.path)
                    XMLUtils.removeDuplicateNode(from2.path, duplicateManifestPath.path)
                }
                new TaskHookerManager(project).registerProcessResourceTask(processResTask, appVariant)
                MergeSourceSetFolders mergeAssetsTask = appVariant.getVariantData().taskContainer.mergeAssetsTask.get()
                mergeAssetsTask.doLast {
                    println "registerTaskHookers appVariant = ${appVariant.name} mergeAssetsTask = ${mergeAssetsTask} mergeAssetsTask.doLast"
                    new MergeAssetsHooker(project, appVariant).collectAndStripAssets(mergeAssetsTask)
                }
            } else {
                println("${appVariant.name} not contain plugin")
            }
        }
    }

    private void passByTask(taskName, ApplicationVariantImpl appVariant) {
        def task = project.tasks.findByName(taskName)
        if (task != null) {
            println "registerTaskHookers taskName = ${taskName} ,task exist"
            task.doFirst {
                virtualApk.buildingVariantKey = taskName
                println "buildingVariantKey is ${virtualApk.buildingVariantKey}"
                println "registerTaskHookers appVariant = ${appVariant.name} taskName = ${taskName} task.doFirst"
                def prepareDependenciesHooker = new PrepareDependenciesHooker(project, appVariant)
                prepareDependenciesHooker.collectHostDependencies()
                prepareDependenciesHooker.collectVariantDependencies()
            }
        } else {
            println "registerTaskHookers taskName = ${taskName} ,task not exist"
        }
    }

    File getJarPath() {
        URL url = this.class.getResource("")
        int index = url.path.indexOf('!')
        if (index < 0) {
            index = url.path.length()
        }
        return project.file(url.path.substring(0, index))
    }

    private boolean evaluateBuildingPlugin(AppPlugin appPlugin, Project project) {
        boolean isBuildingPlugin = false

        def startParameter = project.gradle.startParameter
        def targetTasks = startParameter.taskNames
        println "[BasePlugin.evaluateBuildingPlugin] targetTasks=" + targetTasks
        if (targetTasks.size() > 0) {
            isBuildingPlugin = targetTasks[0].startsWith("assemble") && targetTasks[0].endsWith("Plugin")
        }

        println "[BasePlugin.evaluateBuildingPlugin] isBuildingPlugin=" + isBuildingPlugin
        def pluginTasks = ['assemblePlugin'] as List<String>
        println "[BasePlugin.evaluateBuildingPlugin] appPlugin.variantManager.variantScopes = " + appPlugin.variantManager.variantScopes

        appPlugin.variantManager.variantScopes.each {
            VariantScopeImpl scope = it as VariantScopeImpl
            println "[BasePlugin.evaluateBuildingPlugin] scope.variantData.name = " + scope.variantData.name
        }
        appPlugin.variantManager.buildTypes.each {
            def buildType = it.value.buildType
            println "[BasePlugin.evaluateBuildingPlugin] buildType = " + buildType

            appPlugin.variantManager.variantScopes.each {
//                String variantName
//                if (project.extensions.extraProperties.get(Constants.GRADLE_3_1_0)) {
//                    variantName = Reflect.on('com.android.build.gradle.internal.core.VariantConfiguration')
//                            .call('computeFullName', it.key, buildType, VariantType.DEFAULT, null)
//                            .get()
//                } else {
//                    variantName = Reflect.on('com.android.builder.core.VariantConfiguration')
//                            .call('computeFullName', it.key, buildType, VariantType.DEFAULT, null)
//                            .get()
//                }
                println "[BasePlugin.evaluateBuildingPlugin] it.fullVariantName.capitalize() = " + it.fullVariantName.capitalize()
//                def variantPluginTaskName = createPluginTaskName("assemble${it.fullVariantName.capitalize()}Plugin".toString())
//                pluginTasks.add(variantPluginTaskName)
            }
        }

//        pluginTasks.each {
//            Log.i 'VAPlugin', "pluginTask: ${it}"
//        }

//        NameMatcher nameMatcher = new NameMatcher()
//        targetTasks.every {
//            int index = it.lastIndexOf(":");
//            String task = index >= 0 ? it.substring(index + 1) : it
//            String taskName = nameMatcher.find(task, pluginTasks)
//            if (taskName != null) {
////                Log.i 'VAPlugin', "Found task name '${taskName}' by given name '${it}'"
//                isBuildingPlugin = true
//                return false
//            }
//            return true
//        }

        return isBuildingPlugin
    }

    private void checkPluginDependVersion(boolean isBuildingPlugin) {
        HashSet<String> replacedSet = [] as HashSet
        project.rootProject.subprojects { Project p ->
            p.configurations.all { Configuration configuration ->
                configuration.resolutionStrategy { ResolutionStrategy resolutionStrategy ->
                    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
                        if (!isBuildingPlugin) {
                            return
                        }

                        checkConfig()

                        def hostDependency = virtualApk.hostDependencies.get("${details.requested.group}:${details.requested.name}")
                        if (hostDependency != null) {
                            if ("${details.requested.version}" != "${hostDependency['version']}") {
                                String key = "${p.name}:${details.requested}"
                                if (!replacedSet.contains(key)) {
                                    replacedSet.add(key)
                                    if (virtualApk.forceUseHostDependences) {
//                                        Log.i 'Dependencies', "ATTENTION: Replaced module [${details.requested}] in project(:${p.name})'s configuration to host version: [${hostDependency['version']}]!"
                                    } else {
                                        virtualApk.addWarning "WARNING: [${details.requested}] in project(:${p.name})'s configuration will be occupied by Host App! Please change it to host version: [${hostDependency['group']}:${hostDependency['name']}:${hostDependency['version']}]."
                                        virtualApk.setFlag('tip.forceUseHostDependences', true)
                                    }
                                }

                                if (virtualApk.forceUseHostDependences) {
                                    details.useVersion(hostDependency['version'])
                                }
                            }
                        }
                    }
                }
            }
        }
    }

}
